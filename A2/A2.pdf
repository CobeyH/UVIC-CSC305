
Computer Graphics is composed of many components to get us from object models to pixels on the screen. This assignment tests your understanding of hierarchical transformations, the camera, textures, and shaders.

Write a program in JavaScript/WebGL that draws an animated scene with the requirements given below. Template code is provided to handle many of the aspects necessary to get basic objects rendered with textures and moving in a scene. Use the template code found here on the course webpage.

There are important notes about the template code regarding textures below! You will very likely have to address these, so make sure to read them carefully. There is a lot of information here, it is for your benefit. Make sure you read the assignment text from beginning to end. If you have questions consult this assignment text first.
Marking Scheme

Total Marks: 47

    [4 Marks] At least one two-level hierarchical object (e.g. human arm).
    [6 Marks] At least two textures either procedural or mapped.
    [10 Marks] At least one shader edited or designed from scratch to perform a clearly visible effect. Each line of your shader must be commented clearly explaining exactly what the following line does and why. You must clearly identify the purpose and effect the shader produces in the submitted README.
    [4 Marks] 360 degrees camera fly around using lookAt() and setMV().
    [4 Marks] Connection to real-time. You should make sure that your scene runs in real-time on fast enough machines. Real-time means that one simulated second corresponds roughly to one real second.
    [2 Marks] You should display the frame rate of your program in the console window or the graphics window once every 2 seconds.
    [5 Marks] Complexity: scene setup and design, movement of animated elements, and programming.
    [5 Marks] Creativity: storytelling, scene design, object appearance and other artistic elements.
    [5 Marks] Quality:  Attention to detail, modeling quality, rendering quality, motion control.
    [2 Marks] Programming style.
    [-2 Marks if not] Make and submit a movie of your animation. The movie should be at least 512x512 resolution and in a standard format, such as mp4. Include a cover image (png or jpg) of at least 512x512 pixels. You may use any screen capture program that is available (e.g. ShareX).
    [-4 Marks if not] Provide a readme.txt that describes what you have done, what you have omitted, and any other information that will help the grader evaluation your work, including what is stated below.

Requirements/Policies
Collaboration

None. If you discuss this assignment with others, you should submit their names along with the assignment material.
Original Work

The assignment must be done from scratch. Apart from the template provided, you should not use code from any other source, including the previous offering of the class. 

Note there are many shader sources on the internet. Please develop your own first! You can seek inspiration but do not use other’s code.
Zero Mark

If the code does not run, or no objects appear in the window, or only the template code is running properly, no partial marks will be given.
Clarifications

    Note that creativity and complexity are both important for this assignment.
    Make sure you rotate the body parts around the correct point, i.e. where they touch the parent body parts, so bodies do not appear to break apart.
    Start your code in main.js:render() and feel free to write additional functions
    You must do the assignment from scratch. If you use existing code (e.g. A1) then you must state that clearly in your readme.txt file. Using any piece of code from any source (e.g. previous offerings of the course, A1, the web etc) without attribution will be considered plagiarism.
    You can use libraries as stated below. You will not get credit for the code you have not written, however, it might help with the visual complexity of your scene. For example, if you use an existing model for required element 1, then you will not get credit for it. See below for more details.

Project Submission Instructions

    Make a backup copy of your project folder first to avoid accidentally deleting your work.
    Rename the parent project folder to include your name
    Remove un-necessary files from the project.
    Archive the project folder in a zip folder and call it csc305_assignment_2.zip.
    Test the archive
        Unzip the archive in a different location.
        Make sure everything works as expected.
    Submit the zip file on brightspaces.

We want to be able to open your zip file, run, and see your project right away. Also note that you can add as many files as you want to the project as well as modify any settings that you need to (see below). However, it would be useful if you stated unusual settings and additional files in the readme.txt.
Movie Submission Instructions

    Call your movie file <first>_<last>_movie.[mpg,mp4], replacing <first> and <last> with your first name and last name.
    Call your image file <first>_<last>_image.jpg.
    Zip the two files in an archive called <first>_<last>_bundle.zip.
    Submit the file on brightspaces.

Security Issues with Textures

If the textures do not work, check the console for an error message related to “Cross-origin image”.  To use textures in WebGL we have to bypass a security issue that is present with most browsers.
Firefox

    Go to:  about:config
    Find: security.fileuri.strict_origin_policy parameter
    Set it to false

Chrome

Close all running chrome instances first. Then start Chrome executable with a command line flag (strongly suggest making this a desktop icon for easy reuse):

chrome --allow-file-access-from-files

For more details and other methods see:

https://github.com/mrdoob/three.js/wiki/How-to-run-things-locally
FAQ

    Are there any size limitations to the project? i.e. number of classes, project size, memory, number of textures, texture resolution etc?
    A: In terms of texture resolution, number of textures etc, there are:
        Hardware and software limitations. There is a maximum number of textures you can have active at the same time, and there is a maximum size for textures.
        Practical limitations.  Brightspaces has a 1gb limit on what you can upload and a recommended 40mb maximum. You also want your project to run in real-time.
    What should be the duration of the movie?
    A: Between 30-60 seconds.
    Can we use images from the web?
    A: As long as the images are free for public use, sure. Do not use assets that are copyrighted. Note that the filters on google images are rarely correct w.r.t usage rights. Check out resources like:
        Wiki Commons
            https://commons.wikimedia.org/wiki/Main_Page
        PARIS MUSÉES
            https://www.parismuseescollections.paris.fr/en
        Smithsonian Open Access
            https://www.si.edu/OpenAccess
    Can we use external libraries?
    A: As long as they (a) are free for public use, (b) do not make the required elements unfairly easier for you,  and (c) the TA can run your project, you can use additional libraries. However, if the TA cannot run your program because of missing dependencies etc. you will have a problem.
    Can we use audio?
    A: You can, however 3) also applies here.
    How ambitious can we be?
    A: I encourage you to take this opportunity and explore your programming (additional libraries, effects etc.) and your creative interests. However, I advise you not to aim too high, unless you are confident about what you are doing.  Above all, FIRST make sure that you have covered the required elements of the assignment.

Hints

    Use the TIME variable to synchronize your animation elements.
    Use setColor(r,g,b) to set the desired colors.
    For the motions, you may want to use functions such as
        Wave functions
            x(TIME) = A*Math.cos(w*TIME+h)
                Where TIME is real-time, A is amplitude, Math.cos is cosine function, w is the angular frequency, h is the phase
        ​Euler integration for movement
            x(t + h) = x(t) + x'(t)h
                Next position in time ( x(t + h) ) is just the current position ( x(t) )plus velocity ( x'(t) ) scaled by the change in time (h).
    Common mistakes with motion
        Camera Motion
            eye[0] = eye[0]*Math.cos(theta) + eye[2]*Math.Sin(theta) ;
            eye[2] = -eye[0]*Math.sin(theta) + eye[2]*Math.cos(theta) ; // use of the new eye[0] instead of the original eye[0]

